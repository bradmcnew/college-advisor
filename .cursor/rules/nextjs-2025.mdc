---
description:
globs:
alwaysApply: false
---

# Large-Scale Next.js App Router Best Practices (2025 Edition)

## 🗂️ Project Structure

1. Use /app/ directory (App Router) instead of /pages/.
2. Modularize by feature, not by file type.
   Example:
   /app
   /dashboard
   error.tsx
   page.tsx
   layout.tsx
   loading.tsx
   DashboardClient.tsx
   DashboardServer.ts
3. Use `lib/` and `services/` folders:
   - lib/: Utility and pure functions.
   - services/: Business logic, API calls, DB access.

## 🧠 Component Patterns

4. Use `use client` sparingly.
   - Only use for interactivity (forms, modals, dropdowns).
5. Use Tailwind CSS.
6. Use arrow function syntax with named exports when possible.

## ⚙️ Server-Side Practices

7. Prefer server actions over API routes.
   Example:
   'use server'

   export async function createBooking(data) {
   const validated = schema.parse(data)
   await db.booking.create({ data: validated })
   }

8. Use streaming and suspense with loading.tsx where possible.

## 🧱 State Management

9. Prefer local state + server actions.

## 🧪 Testing & Type Safety

11. Use Zod for runtime validation.
12. Type everything end-to-end.
13. Use Vitest for unit tests, Playwright for E2E.

## 🌐 Networking & Caching

14. Use fetch in Server Components with cache control.
    Example:
    fetch('/api/data', { next: { revalidate: 60 } })
15. Avoid client-side fetching unless necessary.

## 🔒 Security & Auth

16. Use NextAuth or Auth.js with Server Components.
17. Use HttpOnly cookies for JWTs or sessions.
18. Protect routes with middleware or DAL auth checks.
